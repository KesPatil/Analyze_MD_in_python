#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb 28 14:14:52 2019

@author: keshavpatil
"""

# This code check for the free energy profile convergence generated by 
# Metadynamics sampling. We have to set a threshold for the difference 
# between two free energy profiles for each bin in the plot.
# The criterion for that is reference here:
# Paper: Sutto, L., & Gervasio, F. L. (2013). 
# Effects of oncogenic mutations on the conformational free-energy
# landscape of EGFR kinase. Proceedings of the National Academy of Sciences, 
# 110(26), 10616-10621.




import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as mtick

def free_energy_convergence_check(lines,n):
    bin_size_active = n # This was set in the PLUMED simulation
    bin_size_inactive = n 
    new_lines = []
    # Get rid of empty lines in both the files
    
    for line in lines:
        # Strip whitespace, should leave nothing if empty line was just "\n"
        if not line.strip():
            continue
        # We got something, save it
        else:
            new_lines.append(line)
    lines = new_lines        
    x  = []
    y1 = [] # stores the inactive coordinates
    y2 = [] # stores the active coordinates
    z1 = []
    z = np.zeros((1,bin_size_inactive))
    for i in range(0,len(lines)):
        
        words = lines[i].split()
        int_lst = [float(x) for x in words]
       
        y1.append(int_lst[0]) #y1 takes in inactive rmsd coordinates
        y2.append(int_lst[1]) #y2 takes in active rmsd coordinates
        z1.append(int_lst[2])  #z takes the free energy
     
                
    y1 = np.array(y1)
    y2 = np.array(y2)
    
    y1 = y1[0:bin_size_inactive]
    y2 = y2[0:len(lines):bin_size_inactive]
    
    # making a 2-D matrix z
    for i in range(0,len(z1),bin_size_inactive):
        z = np.r_[z,[z1[i:i+bin_size_inactive]]] 

    # deleting the first row of all zeros in z
    z = np.delete(z, (0), axis=0)
    
    
    x,y = np.meshgrid(y1,y2)

    z = z - z.min()
    return(z)



print('Enter the consistent n_bins that you used in plumed sum_hills command')
n = int(input())

print('Enter the line number from where the numbers start')
n_line = int(input())
# The previous free energy profile
with open('/Users/keshavpatil/Desktop/Research/RADHKRISHNAN_LAB/ALK/HILLS_alk/HILLS_500/fes_500.dat') as f1:
    lines1 = f1.readlines()
    
# The current free energy profile
with open('/Users/keshavpatil/Desktop/Research/RADHKRISHNAN_LAB/ALK/HILLS_alk/HILLS_600/fes_600.dat') as f2:
    lines2 = f2.readlines()

lines1 = lines1[n_line:]
lines2 = lines2[n_line:]

# Get back the free energy values in each bin
r1 = free_energy_convergence_check(lines1,n)
r2 = free_energy_convergence_check(lines2,n)

# check for difference 
res = r2 - r1

# Now we have to check the number of elements in array res that 
# are larger than the threshold that we set

threshold = 3 #3Kcal/mol

#To count the number of values larger than x in any numpy array you can use:

count = len(res[res > threshold])

print(count)
